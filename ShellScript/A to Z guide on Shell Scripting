
Welcome to the **ShellScript Learning Repository**! This repository is designed for **beginners to intermediate learners** who want to understand and master shell scripting in Unix/Linux environments.

---

## 🔍 What is Shell Scripting?

Shell scripting is the process of writing a sequence of commands for the shell (command line interpreter) to execute. It is typically used for:

- Automating repetitive tasks
- Managing users, files, and systems
- Running cron jobs (scheduled tasks)
- Performing backups
- Deploying applications
- Integrating with tools like AWS CLI, Git, and Docker

Shell scripts are written in plain text using `.sh` extension and executed using Bash, Zsh, or any Unix shell.

---

## 📘 Why Learn Shell Scripting?

- 📂 Automate daily system admin tasks  
- 🚀 Deploy software faster with scripts  
- 💻 Understand how Linux systems work  
- ⚙️ Boost productivity in DevOps pipelines  
- 💡 Write custom utilities for your projects  

---

## 📚 Topics Covered

Each file in this repository is a Markdown guide or shell script sample. Here's what you'll learn:

| 📁 File Name | 📖 What It Covers |
|-------------|-------------------|
| `1-Predefine-Variable.md` | Learn built-in variables like `$0`, `$#`, `$@`, etc. |
| `2-UserInput-Variable.md` | Take input from the user using `read` command. |
| `3-Arguments.md` | Pass and handle arguments from command-line to scripts. |
| `4-NewUser-Creation.md` | Create new users using `useradd` with validations. |
| `5-Userdel.md` | Delete users using `userdel` with checks. |
| `6-Packages-install.md` | Install system packages (`apt`, `yum`, etc.). |
| `7-UserExist.md` | Check if a user already exists. |
| `8-function.md` | Write reusable functions inside scripts. |
| `9-Loop.md` | Use `for`, `while`, and `until` loops in real scenarios. |
| `10-Backup-file-store.md` | Create local backups of important files. |
| `11-Cron.md` | Schedule scripts to run automatically with cron jobs. |
| `12-Backup-store-in-S3bucket.md` | Upload files to AWS S3 using shell + AWS CLI. |

---

## 🔠 Shell Scripting – From A to Z

### A. Anatomy of a Shell Script
```bash
#!/bin/bash
# This is a comment
echo "Hello, World!"
````

### B. Variables

```bash
name="Ashka"
echo "Hello $name"
```

### C. User Input

```bash
read -p "Enter your name: " name
echo "Welcome, $name"
```

### D. Arguments

```bash
echo "First argument: $1"
```

### E. Conditional Statements

```bash
if [ "$age" -ge 18 ]; then
  echo "Adult"
else
  echo "Minor"
fi
```

### F. Loops

```bash
for i in 1 2 3; do
  echo "Value is $i"
done
```

### G. Functions

```bash
greet() {
  echo "Hi $1"
}
greet "Ashka"
```

### H. Arrays

```bash
fruits=("apple" "banana" "cherry")
echo "${fruits[1]}"
```

### I. File Operations

```bash
touch file.txt
cat file.txt
rm file.txt
```

### J. Error Handling

```bash
if [ ! -f file.txt ]; then
  echo "File not found!"
  exit 1
fi
```

### K. Cron Jobs

```bash
# Run every day at 5 PM
0 17 * * * /home/user/backup.sh
```

### L. Permissions

```bash
chmod +x script.sh
```

### M. Logging

```bash
echo "Backup started at $(date)" >> backup.log
```

### N. AWS CLI

```bash
aws s3 cp file.txt s3://mybucket/
```

---

## 🧪 How to Run These Scripts

1. Open terminal and navigate to the folder.
2. Make the script executable:

```bash
chmod +x script.sh
```

3. Run it:

```bash
./script.sh
```

---

## ⚙️ Tools You Should Know

* Bash
* Cron
* `awk`, `sed`, `grep`
* AWS CLI
* Git for version control

---

## 📦 Real-World Use Cases

* User management
* Backup automation
* Server setup
* Monitoring systems
* Log management
* File cleanup

